


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; void _bzero( void *s, int n )
    6 00000000         ; Parameters
    7 00000000         ; s   - pointer to the memory location to zero-initializ
                       e
    8 00000000         ; n  - a number of bytes to zero-initialize
    9 00000000         ; Return value
   10 00000000         ;   none
   11 00000000                 EXPORT           _bzero
   12 00000000         _bzero
   13 00000000         ; r0 = s
   14 00000000         ; r1 = n
   15 00000000         ; r2 = 0
   16 00000000 E92D 5FFE       STMFD            sp!, {r1-r12,lr}
   17 00000004 4603            MOV              r3, r0      ; r3 = dest
   18 00000006 F04F 0200       MOV              r2, #0      ; r2 = 0; 
   19 0000000A         _bzero_loop                          ; while( ) {
   20 0000000A 1E49            SUBS             r1, r1, #1  ;  n--;
   21 0000000C D402            BMI              _bzero_return ;   if ( n < 0 ) 
                                                            break; 
   22 0000000E F800 2B01       STRB             r2, [r0], #0x1 ; [s++] = 0;
   23 00000012 E7FA            B                _bzero_loop ; }
   24 00000014         _bzero_return
   25 00000014 4618            MOV              r0, r3      ; return dest;
   26 00000016 E8BD 5FFE       LDMFD            sp!, {r1-r12,lr}
   27 0000001A 46F7            MOV              pc, lr
   28 0000001C         
   29 0000001C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   30 0000001C         ; char* _strncpy( char* dest, char* src, int size )
   31 0000001C         ; Parameters
   32 0000001C         ;   dest  - pointer to the buffer to copy to
   33 0000001C         ; src  - pointer to the zero-terminated string to copy f
                       rom
   34 0000001C         ; size - a total of n bytes
   35 0000001C         ; Return value
   36 0000001C         ;   dest
   37 0000001C                 EXPORT           _strncpy
   38 0000001C         _strncpy
   39 0000001C         ; r0 = dest
   40 0000001C         ; r1 = src
   41 0000001C         ; r2 = size
   42 0000001C         ; r3 = a copy of original dest
   43 0000001C         ; r4 = src[i]
   44 0000001C E92D 5FFE       STMFD            sp!, {r1-r12,lr}
   45 00000020 4603            MOV              r3, r0      ; r3 = dest
   46 00000022         _strncpy_loop                        ; while( ) {
   47 00000022 1E52            SUBS             r2, r2, #1  ;  size--;
   48 00000024 D406            BMI              _strncpy_return ;  if ( size < 
                                                            0 ) break;   
   49 00000026 F811 4B01       LDRB             r4, [r1], #0x1 ;  r4 = [src++];
                                                            
   50 0000002A F800 4B01       STRB             r4, [r0], #0x1 ; [dest++] = r4;
                                                            



ARM Macro Assembler    Page 2 


   51 0000002E 2C00            CMP              r4, #0      ;   
   52 00000030 D000            BEQ              _strncpy_return ; if ( r4 = '\0
                                                            ' ) break;
   53 00000032 E7F6            B                _strncpy_loop ; }
   54 00000034         _strncpy_return
   55 00000034 4618            MOV              r0, r3      ; return dest;
   56 00000036 E8BD 5FFE       LDMFD            sp!, {r1-r12,lr}
   57 0000003A 46F7            MOV              pc, lr
   58 0000003C         
   59 0000003C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   60 0000003C         ; void* _malloc( int size )
   61 0000003C         ; Parameters
   62 0000003C         ; size - #bytes to allocate
   63 0000003C         ; Return value
   64 0000003C         ;    void* a pointer to the allocated space
   65 0000003C                 EXPORT           _malloc
   66 0000003C         _malloc
   67 0000003C E92D 5FFE       STMFD            sp!, {r1-r12,lr} 
                                                            ; save registers
   68 00000040 F04F 0703       MOV              R7, #3
   69 00000044         
   70 00000044 DF00            SVC              #0x0
   71 00000046 E8BD 5FFE       LDMFD            sp!, {r1-r12,lr} 
                                                            ; resume registers
   72 0000004A 46F7            MOV              pc, lr
   73 0000004C         
   74 0000004C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   75 0000004C         ; void _free( void* addr )
   76 0000004C         ; Parameters
   77 0000004C         ; size - the address of a space to deallocate
   78 0000004C         ; Return value
   79 0000004C         ;    none
   80 0000004C                 EXPORT           _free
   81 0000004C         _free
   82 0000004C E92D 5FFE       STMFD            sp!, {r1-r12,lr} 
                                                            ; save registers
   83 00000050 F04F 0704       MOV              R7, #4
   84 00000054 DF00            SVC              #0x0
   85 00000056 E8BD 5FFE       LDMFD            sp!, {r1-r12,lr} 
                                                            ; resume registers
   86 0000005A 46F7            MOV              pc, lr
   87 0000005C         
   88 0000005C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   89 0000005C         ; unsigned int _alarm( unsigned int seconds )
   90 0000005C         ; Parameters
   91 0000005C         ;   seconds - seconds when a SIGALRM signal should be de
                       livered to the calling program 
   92 0000005C         ; Return value
   93 0000005C                 EXPORT           _alarm
   94 0000005C         _alarm
   95 0000005C E92D 5FFE       STMFD            sp!, {r1-r12,lr} 
                                                            ; save registers
   96 00000060 F04F 0701       MOV              R7, #1
   97 00000064 DF00            SVC              #0x0
   98 00000066 E8BD 5FFE       LDMFD            sp!, {r1-r12,lr} 
                                                            ; resume registers 



ARM Macro Assembler    Page 3 


                                                            
   99 0000006A 46F7            MOV              pc, lr
  100 0000006C         
  101 0000006C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102 0000006C         ; void* _signal( int signum, void *handler )
  103 0000006C         ; Parameters
  104 0000006C         ;   signum - a signal number (assumed to be 14 = SIGALRM
                       )
  105 0000006C         ;   handler - a pointer to a user-level signal handling 
                       function
  106 0000006C         ; Return value
  107 0000006C                 EXPORT           _signal
  108 0000006C         _signal
  109 0000006C E92D 5FFC       STMFD            sp!, {r2-r12,lr} 
                                                            ; save registers 
  110 00000070 F04F 0702       MOV              R7, #2
  111 00000074 DF00            SVC              #0x0
  112 00000076 E8BD 5FFC       LDMFD            sp!, {r2-r12,lr} 
                                                            ; resume registers
  113 0000007A 46F7            MOV              pc, lr
  114 0000007C         
  115 0000007C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
  116 0000007C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\stdlib.d -o.\objects\stdlib.o -I.\RTE\_Target_1 -I"C:
\Program Files\Keil\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include" -I"C:\Program 
Files\Keil\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1
" --predefine="TM4C129XNCZAD SETA 1" --list=.\listings\stdlib.lst stdlib.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file stdlib.s
   Uses
      None
Comment: .text unused
_alarm 0000005C

Symbol: _alarm
   Definitions
      At line 94 in file stdlib.s
   Uses
      At line 93 in file stdlib.s
Comment: _alarm used once
_bzero 00000000

Symbol: _bzero
   Definitions
      At line 12 in file stdlib.s
   Uses
      At line 11 in file stdlib.s
Comment: _bzero used once
_bzero_loop 0000000A

Symbol: _bzero_loop
   Definitions
      At line 19 in file stdlib.s
   Uses
      At line 23 in file stdlib.s
Comment: _bzero_loop used once
_bzero_return 00000014

Symbol: _bzero_return
   Definitions
      At line 24 in file stdlib.s
   Uses
      At line 21 in file stdlib.s
Comment: _bzero_return used once
_free 0000004C

Symbol: _free
   Definitions
      At line 81 in file stdlib.s
   Uses
      At line 80 in file stdlib.s
Comment: _free used once
_malloc 0000003C

Symbol: _malloc
   Definitions
      At line 66 in file stdlib.s
   Uses
      At line 65 in file stdlib.s
Comment: _malloc used once
_signal 0000006C

Symbol: _signal



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 108 in file stdlib.s
   Uses
      At line 107 in file stdlib.s
Comment: _signal used once
_strncpy 0000001C

Symbol: _strncpy
   Definitions
      At line 38 in file stdlib.s
   Uses
      At line 37 in file stdlib.s
Comment: _strncpy used once
_strncpy_loop 00000022

Symbol: _strncpy_loop
   Definitions
      At line 46 in file stdlib.s
   Uses
      At line 53 in file stdlib.s
Comment: _strncpy_loop used once
_strncpy_return 00000034

Symbol: _strncpy_return
   Definitions
      At line 54 in file stdlib.s
   Uses
      At line 48 in file stdlib.s
      At line 52 in file stdlib.s

11 symbols
346 symbols in table
