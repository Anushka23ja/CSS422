


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; System Call Table
    6 00000000 20001000 
                       HEAP_TOP
                               EQU              0x20001000
    7 00000000 20004FE0 
                       HEAP_BOT
                               EQU              0x20004FE0
    8 00000000 00004000 
                       MAX_SIZE
                               EQU              0x00004000  ; 16KB = 2^14
    9 00000000 00000020 
                       MIN_SIZE
                               EQU              0x00000020  ; 32B  = 2^5
   10 00000000         
   11 00000000 20006800 
                       MCB_TOP EQU              0x20006800  ; 2^10B = 1K Space
   12 00000000 20006BFE 
                       MCB_BOT EQU              0x20006BFE
   13 00000000 00000002 
                       MCB_ENT_SZ
                               EQU              0x00000002  ; 2B per entry
   14 00000000 00000200 
                       MCB_TOTAL
                               EQU              512         ; 2^9 = 512 entries
                                                            
   15 00000000         
   16 00000000 FFFFFFFF 
                       INVALID EQU              -1          ; an invalid id
   17 00000000         
   18 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19 00000000         ; Memory Control Block Initialization
   20 00000000                 EXPORT           _heap_init
   21 00000000         _heap_init
   22 00000000 486B            LDR              R0, =MCB_TOP
   23 00000002 F44F 4180       LDR              R1, =MAX_SIZE
   24 00000006 6001            STR              R1, [R0]
   25 00000008         
   26 00000008 486A            LDR              R0, =MCB_TOP+0x4 ; 0x20006804
   27 0000000A 496B            LDR              R1, =0x20006C00
   28 0000000C F04F 0200       MOV              R2, #0x0
   29 00000010         
   30 00000010         _heap_mcb_init
   31 00000010 4288            CMP              R0, R1
   32 00000012 DA06            BGE              _heap_done
   33 00000014         
   34 00000014 6002            STR              R2, [R0]
   35 00000016 F100 0001       ADD              R0, R0, #1
   36 0000001A 6002            STR              R2, [R0]
   37 0000001C F100 0002       ADD              R0, R0, #2
   38 00000020 E7F6            B                _heap_mcb_init
   39 00000022         
   40 00000022         _heap_done



ARM Macro Assembler    Page 2 


   41 00000022 46F7            MOV              pc, lr
   42 00000024         
   43 00000024         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   44 00000024         ; Kernel Memory Allocation
   45 00000024         ; void* _k_alloc( int size )
   46 00000024                 EXPORT           _kalloc
   47 00000024         _kalloc
   48 00000024 B500            PUSH             {lr}
   49 00000026 2820            CMP              R0, #32
   50 00000028 DA01            BGE              set_size
   51 0000002A F04F 0020       MOV              R0, #32
   52 0000002E         
   53 0000002E         set_size
   54 0000002E 4960            LDR              R1, =MCB_TOP ; Load 
   55 00000030 4A62            LDR              R2, =MCB_BOT ; Load 
   56 00000032 F04F 0302       LDR              R3, =MCB_ENT_SZ ; Load 
   57 00000036 F000 F804       BL               allocate_memory
   58 0000003A         
   59 0000003A F85D EB04       POP              {lr}
   60 0000003E 4660            MOV              R0, R12     ; Move the result t
                                                            o R0
   61 00000040 46F7            MOV              pc, lr      ; Return
   62 00000042         
   63 00000042         allocate_memory
   64 00000042 B500            PUSH             {lr}
   65 00000044         
   66 00000044 EBA2 0401       SUB              R4, R2, R1  ; Calculate the siz
                                                            e of the entire mem
                                                            ory block
   67 00000048 441C            ADD              R4, R4, R3  ; Add the entry siz
                                                            e
   68 0000004A EA4F 0564       ASR              R5, R4, #1  ; Calculate half of
                                                             the memory block
   69 0000004E EB01 0605       ADD              R6, R1, R5  ; Find the midpoint
                                                            
   70 00000052 EA4F 1704       LSL              R7, R4, #4  ; Calculate the act
                                                            ual entire size
   71 00000056 EA4F 1805       LSL              R8, R5, #4  ; Calculate the act
                                                            ual half size
   72 0000005A F04F 0C00       MOV              R12, #0x0   ; Initialize the he
                                                            ap address to zero
   73 0000005E         
   74 0000005E 4540            CMP              R0, R8
   75 00000060 DC1D            BGT              no_allocation
   76 00000062         
   77 00000062 E92D 01FF       PUSH             {r0-r8}     ; Save registers
   78 00000066 EBA6 0203       SUB              R2, R6, R3
   79 0000006A F7FF FFEA       BL               allocate_memory
   80 0000006E E8BD 01FF       POP              {r0-r8}     ; Restore registers
                                                            
   81 00000072         
   82 00000072 F1BC 0F00       CMP              R12, #0x0
   83 00000076 D007            BEQ              allocate_right
   84 00000078         
   85 00000078 F8D6 9000       LDR              R9, [R6]    ; Check the midpoin
                                                            t memory
   86 0000007C F009 0901       AND              R9, R9, #0x01
   87 00000080 F1B9 0F00       CMP              R9, #0



ARM Macro Assembler    Page 3 


   88 00000084 D008            BEQ              return_heap_address
   89 00000086 E027            B                allocation_done
   90 00000088         
   91 00000088         allocate_right
   92 00000088 E92D 01FF       PUSH             {r0-r8}     ; Save registers
   93 0000008C 4631            MOV              R1, R6
   94 0000008E F7FF FFD8       BL               allocate_memory
   95 00000092 E8BD 01FF       POP              {r0-r8}     ; Restore registers
                                                            
   96 00000096 E01F            B                allocation_done
   97 00000098         
   98 00000098         return_heap_address
   99 00000098 F8C6 8000       STR              R8, [R6]
  100 0000009C E01C            B                allocation_done
  101 0000009E         
  102 0000009E         no_allocation
  103 0000009E F8D1 9000       LDR              R9, [R1]    ; Check the left me
                                                            mory
  104 000000A2 F009 0901       AND              R9, R9, #0x01
  105 000000A6 F1B9 0F00       CMP              R9, #0
  106 000000AA D112            BNE              return_invalid
  107 000000AC         
  108 000000AC F8D1 9000       LDR              R9, [R1]    ; Check the left me
                                                            mory
  109 000000B0 45B9            CMP              R9, R7
  110 000000B2 DB0E            BLT              return_invalid
  111 000000B4         
  112 000000B4 F047 0901       ORR              R9, R7, #0x01 ; Mark the memory
                                                             as allocated
  113 000000B8 F8C1 9000       STR              R9, [R1]
  114 000000BC         
  115 000000BC F8DF 90F0       LDR              R9, =MCB_TOP ; Load MCB_TOP int
                                                            o R9
  116 000000C0 F8DF A0FC       LDR              R10, =HEAP_TOP ; Load HEAP_TOP 
                                                            into R10
  117 000000C4 EBA1 0109       SUB              R1, R1, R9  ; Calculate the off
                                                            set from MCB_TOP
  118 000000C8 EA4F 1101       LSL              R1, R1, #4  ; Multiply by 16
  119 000000CC 448A            ADD              R10, R10, R1 ; Calculate the he
                                                            ap address
  120 000000CE 46D4            MOV              R12, R10    ; Store the heap ad
                                                            dress
  121 000000D0 E002            B                allocation_done
  122 000000D2         
  123 000000D2         return_invalid
  124 000000D2 F04F 0C00       MOV              R12, #0     ; Set the result to
                                                             zero
  125 000000D6 E7FF            B                allocation_done
  126 000000D8         
  127 000000D8         allocation_done
  128 000000D8 F85D EB04       POP              {lr}
  129 000000DC 4770            BX               lr          ; Return
  130 000000DE         
  131 000000DE         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  132 000000DE         ; Kernel Memory De-allocation
  133 000000DE         ; void free(void *ptr)
  134 000000DE                 EXPORT           _kfree
  135 000000DE         _kfree



ARM Macro Assembler    Page 4 


  136 000000DE B500            PUSH             {lr}
  137 000000E0         
  138 000000E0 4601            MOV              R1, R0      ; Move pointer addr
                                                            ess into R1
  139 000000E2 4A37            LDR              R2, =HEAP_TOP ; Load HEAP_TOP i
                                                            nto R2
  140 000000E4 4B37            LDR              R3, =HEAP_BOT ; Load HEAP_BOT i
                                                            nto R3
  141 000000E6         
  142 000000E6         ; Check if the address is valid
  143 000000E6 4291            CMP              R1, R2      ; Compare address w
                                                            ith HEAP_TOP
  144 000000E8 DB13            BLT              invalid_address ; If less, jump
                                                             to invalid_address
                                                            
  145 000000EA 4299            CMP              R1, R3      ; Compare address w
                                                            ith HEAP_BOT
  146 000000EC DC11            BGT              invalid_address ; If greater, j
                                                            ump to invalid_addr
                                                            ess
  147 000000EE         
  148 000000EE         ; Compute the MCB address
  149 000000EE 4C30            LDR              R4, =MCB_TOP ; Load MCB_TOP int
                                                            o R4
  150 000000F0 EBA1 0502       SUB              R5, R1, R2  ; Subtract HEAP_TOP
                                                             from the pointer
  151 000000F4 EA4F 1525       ASR              R5, R5, #4  ; Divide by 16 (log
                                                            ical shift right by
                                                             4 bits)
  152 000000F8 4425            ADD              R5, R4, R5  ; Add result to MCB
                                                            _TOP
  153 000000FA         
  154 000000FA         ; Call _rfree function
  155 000000FA 4628            MOV              R0, R5
  156 000000FC E92D 1FFE       PUSH             {R1-R12}
  157 00000100 F000 F80C       BL               _rfree
  158 00000104 E8BD 1FFE       POP              {R1-R12}
  159 00000108 2800            CMP              R0, #0      ; Check if _rfree r
                                                            eturns 0
  160 0000010A D002            BEQ              invalid_address
  161 0000010C         
  162 0000010C F85D EB04       POP              {LR}
  163 00000110 46F7            MOV              pc, lr
  164 00000112         
  165 00000112         invalid_address
  166 00000112 F04F 0000       MOV              R0, #0      ; Set return value 
                                                            to NULL
  167 00000116 F85D EB04       POP              {LR}
  168 0000011A 46F7            MOV              pc, lr
  169 0000011C         
  170 0000011C         _rfree
  171 0000011C B500            PUSH             {lr}
  172 0000011E         
  173 0000011E         ; R0 = MCB address
  174 0000011E 6801            LDR              R1, [R0]    ; Load MCB contents
                                                            
  175 00000120 4A23            LDR              R2, =MCB_TOP ; Load MCB_TOP int
                                                            o R2
  176 00000122 EBA0 0302       SUB              R3, R0, R2  ; Calculate MCB off



ARM Macro Assembler    Page 5 


                                                            set
  177 00000126         
  178 00000126 EA4F 1121       ASR              R1, R1, #4
  179 0000012A 460C            MOV              R4, R1      ; MCB chunk
  180 0000012C EA4F 1101       LSL              R1, R1, #4
  181 00000130 460D            MOV              R5, R1      ; Actual size
  182 00000132         
  183 00000132 6001            STR              R1, [R0]
  184 00000134         
  185 00000134 FB93 F6F4       SDIV             R6, R3, R4
  186 00000138 F006 0601       AND              R6, R6, #1
  187 0000013C 2E00            CMP              R6, #0      ; Check if even or 
                                                            odd
  188 0000013E D118            BNE              odd_case
  189 00000140         
  190 00000140         ; Even Case
  191 00000140 EB00 0604       ADD              R6, R0, R4
  192 00000144 4F1D            LDR              R7, =MCB_BOT
  193 00000146 42BE            CMP              R6, R7
  194 00000148 DA2C            BGE              return_zero
  195 0000014A         
  196 0000014A 6837            LDR              R7, [R6]
  197 0000014C F007 0801       AND              R8, R7, #1
  198 00000150 F1B8 0F00       CMP              R8, #0
  199 00000154 D128            BNE              free_done
  200 00000156         
  201 00000156 EA4F 1767       ASR              R7, R7, #5
  202 0000015A EA4F 1747       LSL              R7, R7, #5
  203 0000015E 42AF            CMP              R7, R5      ; Check if buddy si
                                                            ze matches
  204 00000160 D122            BNE              free_done
  205 00000162         
  206 00000162 F8C6 8000       STR              R8, [R6]    ; Clear buddy
  207 00000166 EA4F 0545       LSL              R5, #1      ; Double size
  208 0000016A 6005            STR              R5, [R0]    ; Update size
  209 0000016C         
  210 0000016C F7FF FFD6       BL               _rfree      ; Recurse
  211 00000170 E01A            B                free_done
  212 00000172         
  213 00000172         odd_case
  214 00000172         ; Odd Case
  215 00000172 EBA0 0604       SUB              R6, R0, R4  ; Calculate buddy a
                                                            ddress
  216 00000176 42B2            CMP              R2, R6
  217 00000178 DC14            BGT              return_zero
  218 0000017A         
  219 0000017A 6837            LDR              R7, [R6]    ; Load buddy conten
                                                            ts
  220 0000017C F007 0801       AND              R8, R7, #1
  221 00000180 F1B8 0F00       CMP              R8, #0      ; Check if buddy is
                                                             free
  222 00000184 D110            BNE              free_done
  223 00000186         
  224 00000186 EA4F 1767       ASR              R7, R7, #5
  225 0000018A EA4F 1747       LSL              R7, R7, #5
  226 0000018E 42AF            CMP              R7, R5      ; Check if buddy si
                                                            ze matches
  227 00000190 D10A            BNE              free_done
  228 00000192         



ARM Macro Assembler    Page 6 


  229 00000192 F8C0 8000       STR              R8, [R0]
  230 00000196 EA4F 0545       LSL              R5, #1
  231 0000019A 6035            STR              R5, [R6]
  232 0000019C         
  233 0000019C 4630            MOV              R0, R6
  234 0000019E F7FF FFBD       BL               _rfree
  235 000001A2 E001            B                free_done
  236 000001A4         
  237 000001A4         return_zero
  238 000001A4 F04F 0000       MOV              R0, #0
  239 000001A8         
  240 000001A8         free_done
  241 000001A8 F85D EB04       POP              {lr}
  242 000001AC 4770            BX               lr
  243 000001AE         
  244 000001AE                 END
              00 00 20006800 
              20006804 
              20006C00 
              20006BFE 
              20001000 
              20004FE0 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\heap_1.d -o.\objects\heap_1.o -I.\RTE\_Target_1 -I"C:
\Program Files\Keil\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include" -I"C:\Program 
Files\Keil\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1
" --predefine="TM4C129XNCZAD SETA 1" --list=.\listings\heap.lst heap.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file heap.s
   Uses
      None
Comment: .text unused
_heap_done 00000022

Symbol: _heap_done
   Definitions
      At line 40 in file heap.s
   Uses
      At line 32 in file heap.s
Comment: _heap_done used once
_heap_init 00000000

Symbol: _heap_init
   Definitions
      At line 21 in file heap.s
   Uses
      At line 20 in file heap.s
Comment: _heap_init used once
_heap_mcb_init 00000010

Symbol: _heap_mcb_init
   Definitions
      At line 30 in file heap.s
   Uses
      At line 38 in file heap.s
Comment: _heap_mcb_init used once
_kalloc 00000024

Symbol: _kalloc
   Definitions
      At line 47 in file heap.s
   Uses
      At line 46 in file heap.s
Comment: _kalloc used once
_kfree 000000DE

Symbol: _kfree
   Definitions
      At line 135 in file heap.s
   Uses
      At line 134 in file heap.s
Comment: _kfree used once
_rfree 0000011C

Symbol: _rfree
   Definitions
      At line 170 in file heap.s
   Uses
      At line 157 in file heap.s
      At line 210 in file heap.s
      At line 234 in file heap.s

allocate_memory 00000042



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: allocate_memory
   Definitions
      At line 63 in file heap.s
   Uses
      At line 57 in file heap.s
      At line 79 in file heap.s
      At line 94 in file heap.s

allocate_right 00000088

Symbol: allocate_right
   Definitions
      At line 91 in file heap.s
   Uses
      At line 83 in file heap.s
Comment: allocate_right used once
allocation_done 000000D8

Symbol: allocation_done
   Definitions
      At line 127 in file heap.s
   Uses
      At line 89 in file heap.s
      At line 96 in file heap.s
      At line 100 in file heap.s
      At line 121 in file heap.s
      At line 125 in file heap.s

free_done 000001A8

Symbol: free_done
   Definitions
      At line 240 in file heap.s
   Uses
      At line 199 in file heap.s
      At line 204 in file heap.s
      At line 211 in file heap.s
      At line 222 in file heap.s
      At line 227 in file heap.s
      At line 235 in file heap.s

invalid_address 00000112

Symbol: invalid_address
   Definitions
      At line 165 in file heap.s
   Uses
      At line 144 in file heap.s
      At line 146 in file heap.s
      At line 160 in file heap.s

no_allocation 0000009E

Symbol: no_allocation
   Definitions
      At line 102 in file heap.s
   Uses
      At line 75 in file heap.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: no_allocation used once
odd_case 00000172

Symbol: odd_case
   Definitions
      At line 213 in file heap.s
   Uses
      At line 188 in file heap.s
Comment: odd_case used once
return_heap_address 00000098

Symbol: return_heap_address
   Definitions
      At line 98 in file heap.s
   Uses
      At line 88 in file heap.s
Comment: return_heap_address used once
return_invalid 000000D2

Symbol: return_invalid
   Definitions
      At line 123 in file heap.s
   Uses
      At line 106 in file heap.s
      At line 110 in file heap.s

return_zero 000001A4

Symbol: return_zero
   Definitions
      At line 237 in file heap.s
   Uses
      At line 194 in file heap.s
      At line 217 in file heap.s

set_size 0000002E

Symbol: set_size
   Definitions
      At line 53 in file heap.s
   Uses
      At line 50 in file heap.s
Comment: set_size used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

HEAP_BOT 20004FE0

Symbol: HEAP_BOT
   Definitions
      At line 7 in file heap.s
   Uses
      At line 140 in file heap.s
Comment: HEAP_BOT used once
HEAP_TOP 20001000

Symbol: HEAP_TOP
   Definitions
      At line 6 in file heap.s
   Uses
      At line 116 in file heap.s
      At line 139 in file heap.s

INVALID FFFFFFFF

Symbol: INVALID
   Definitions
      At line 16 in file heap.s
   Uses
      None
Comment: INVALID unused
MAX_SIZE 00004000

Symbol: MAX_SIZE
   Definitions
      At line 8 in file heap.s
   Uses
      At line 23 in file heap.s
Comment: MAX_SIZE used once
MCB_BOT 20006BFE

Symbol: MCB_BOT
   Definitions
      At line 12 in file heap.s
   Uses
      At line 55 in file heap.s
      At line 192 in file heap.s

MCB_ENT_SZ 00000002

Symbol: MCB_ENT_SZ
   Definitions
      At line 13 in file heap.s
   Uses
      At line 56 in file heap.s
Comment: MCB_ENT_SZ used once
MCB_TOP 20006800

Symbol: MCB_TOP
   Definitions
      At line 11 in file heap.s
   Uses
      At line 22 in file heap.s
      At line 26 in file heap.s
      At line 54 in file heap.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 115 in file heap.s
      At line 149 in file heap.s
      At line 175 in file heap.s

MCB_TOTAL 00000200

Symbol: MCB_TOTAL
   Definitions
      At line 14 in file heap.s
   Uses
      None
Comment: MCB_TOTAL unused
MIN_SIZE 00000020

Symbol: MIN_SIZE
   Definitions
      At line 9 in file heap.s
   Uses
      None
Comment: MIN_SIZE unused
9 symbols
364 symbols in table
